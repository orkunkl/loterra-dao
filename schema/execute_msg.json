{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "description": "Create proposal",
      "type": "object",
      "required": [
        "Poll"
      ],
      "properties": {
        "Poll": {
          "type": "object",
          "required": [
            "contract_address",
            "description",
            "proposal"
          ],
          "properties": {
            "amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "contract_address": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "migration": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Migration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "prizes_per_ranks": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "proposal": {
              "$ref": "#/definitions/Proposal"
            },
            "recipient": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Vote proposal",
      "type": "object",
      "required": [
        "Vote"
      ],
      "properties": {
        "Vote": {
          "type": "object",
          "required": [
            "approve",
            "poll_id"
          ],
          "properties": {
            "approve": {
              "type": "boolean"
            },
            "poll_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Present proposal",
      "type": "object",
      "required": [
        "PresentPoll"
      ],
      "properties": {
        "PresentPoll": {
          "type": "object",
          "required": [
            "poll_id"
          ],
          "properties": {
            "poll_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Creator reject proposal",
      "type": "object",
      "required": [
        "RejectPoll"
      ],
      "properties": {
        "RejectPoll": {
          "type": "object",
          "required": [
            "poll_id"
          ],
          "properties": {
            "poll_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Migration": {
      "type": "object",
      "required": [
        "contract_addr",
        "msg",
        "new_code_id"
      ],
      "properties": {
        "contract_addr": {
          "type": "string"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "new_code_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Proposal": {
      "type": "string",
      "enum": [
        "LotteryEveryBlockTime",
        "HolderFeePercentage",
        "DrandWorkerFeePercentage",
        "PrizesPerRanks",
        "JackpotRewardPercentage",
        "AmountToRegister",
        "SecurityMigration",
        "DaoFunding",
        "StakingContractMigration",
        "PollSurvey",
        "NotExist"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
